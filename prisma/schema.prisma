generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  chatSessions  ChatSession[]
  subscription  Subscription?
  adViews       AdView[]
  premiumUntil  DateTime?
  hasSeenWelcome Boolean  @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId  String?  @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  status            String   @default("inactive") // 'active', 'inactive', 'cancelled'
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model AdView {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  adType       String   // 'skippable', 'non-skippable', 'rewarded'
  completed    Boolean  @default(false)
  rewardMinutes Int?    // Minutes of ad-free experience earned
  createdAt    DateTime @default(now())
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatSession {
  id        String   @id @default(cuid())
  title     String   @default("New Chat")
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  Message[]
  
  @@index([userId])
}

model Message {
  id        String   @id @default(cuid())
  role      String   // 'user' or 'assistant'
  content   String   @db.Text
  sessionId String
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@index([sessionId])
}

model PDFJob {
  id           String   @id @default(cuid())
  jobType      String   // 'convert', 'compress', 'merge', 'split', etc.
  status       String   @default("processing") // 'processing', 'completed', 'failed'
  inputFiles   String[] // S3 keys
  outputFile   String?  // S3 key
  errorMessage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
